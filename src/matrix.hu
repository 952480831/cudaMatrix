#ifndef _matrix_hu_
#define _matrix_hu_

#include "errorMacros.hu"

typedef struct
{
	float *h;
	float *d;
	unsigned int w;
	int touched;
} Matrix ;

//! Fill matrix with integer values from -128 to 127
int matFill(Matrix *m);

//! Print a matrix
int matPrint(Matrix *m);

//! Allocate a matrix on host and device
Matrix *matAlloc(unsigned int width);

//! Free a matrix from host and device
void matFree(Matrix *m);

//! LU Decomposition of a matrix
int matDecomposeLU(Matrix *src, Matrix *l, Matrix *u);

//! sync matrix information
inline int _matCopy(Matrix *m, cudaMemcpyKind kind, float *a, float *b)
{
	if(m->touched)
	{
		CHECK_SUCCESS(cudaMemcpy(a, b, m->w * m->w *sizeof(float), kind));
		m->touched = 0;
	}
	return 0;
}

inline int _matCopyHtoD(Matrix *m) { return _matCopy(m, cudaMemcpyHostToDevice, m->d, m->h); }
inline int _matCopyDtoH(Matrix *m) { return _matCopy(m, cudaMemcpyDeviceToHost, m->h, m->d); }


#endif //_matrix_hu_
