#ifndef _matrix_hu_
#define _matrix_hu_

#include "errorMacros.hu"

typedef struct
{
	float *h;
	float *d;
	unsigned int w;
	int touched;
} Matrix ;

//! Fill matrix with integer values from -128 to 127
int matFill(Matrix *m);

//! Print a matrix
int matPrint(Matrix *m);

//! Allocate a matrix on host and device
Matrix *matAlloc(unsigned int width);

//! Free a matrix from host and device
void matFree(Matrix *m);

//! LU Decomposition of a matrix
int matDecomposeLU(Matrix *src, Matrix *l, Matrix *u);

//! Multiplication of two matrices
int matMultiply(Matrix *a, Matrix *b, Matrix *dest);

//! Copy matrix from host to device
inline int _matCopyHtoD(Matrix *m)
{
	CHECK_SUCCESS(cudaMemcpy(m->d, m->h, m->w * m->w *sizeof(float), cudaMemcpyHostToDevice));
	m->touched = 0;
	return 0;
}
//! Copy matrix from host to device
inline int _matCopyDtoH(Matrix *m)
{
	if(m->touched)
	{
		CHECK_SUCCESS(cudaMemcpy(m->h, m->d, m->w * m->w *sizeof(float), cudaMemcpyDeviceToHost));
		m->touched = 0;
	}
	return 0;
}


#endif //_matrix_hu_
